import os
import requests
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)

# Temporary file to store the previous timestamp
TEMP_FILE = "previous_timestamp.txt"

# Vault URLs
VAULT_ENDPOINTS = {
    "login": "https://vault.fg.rbc.com/v1/auth/maple/login/273040279",
    "list": "https://vault.fg.rbc.com/v1/appcodes/S1TO/SAI/QAT/SNOWFLAKE/SERVICE_USERS/SP_S1T0_ADMIN_D_ELK/Azure_Canada_CentraLIST",
    "get_entry": "https://vault.fg.rbc.com/v1/appcodes/S1TO/SAI/QAT/SNOWFLAKE/SERVICE_USERS/SP_S1T0_ADMIN_D_ELK/Azure_Canada_Central_IST",
    "update": "https://vault.fg.rbc.com/v1/appcodes/JUCO/DEV/DEV1/Fulcrum",
}

# Login credentials
login_payload = {"password": os.getenv("VAULT_PASSWORD")}


def make_request(method, url, headers=None, json=None):
    """
    Make an HTTP request with status code handling.
    """
    response = requests.request(method, url, headers=headers, json=json)

    if response.status_code == 200:
        logging.info(f"Request successful: {response.status_code}")
        return response.json()
    elif response.status_code == 401:
        logging.error("Unauthorized: Invalid credentials or token.")
        raise ValueError("Unauthorized access. Check your login credentials or token.")
    elif response.status_code == 404:
        logging.error(f"Not Found: {url}")
        raise ValueError(f"The requested resource at {url} was not found.")
    elif response.status_code == 500:
        logging.error("Internal Server Error.")
        raise ValueError("Server encountered an error. Try again later.")
    else:
        logging.error(f"Unexpected error: {response.status_code} - {response.text}")
        raise ValueError(f"Request failed with status code {response.status_code}: {response.text}")


def login_to_vault():
    logging.info("Logging into Vault...")
    response = make_request("POST", VAULT_ENDPOINTS["login"], json=login_payload)
    vault_token = response.get("auth", {}).get("client_token")
    if not vault_token:
        raise ValueError("Failed to retrieve client token from response.")
    return vault_token


def list_vault_entries(vault_token):
    logging.info("Listing Vault entries...")
    headers = {"X-Vault-Token": vault_token, "Content-Type": "application/json"}
    response = make_request("LIST", VAULT_ENDPOINTS["list"], headers=headers)
    entries = response.get("data", {}).get("keys", [])
    if not entries:
        raise ValueError("No entries found at the specified path.")
    latest_entry = sorted(entries, reverse=True)[0]
    return latest_entry


def save_latest_timestamp(timestamp):
    """Save the latest timestamp to a temporary file."""
    with open(TEMP_FILE, "w") as file:
        file.write(timestamp)
    logging.info(f"Saved latest timestamp: {timestamp}")


def get_previous_timestamp():
    """Retrieve the previous timestamp from the temporary file."""
    if os.path.exists(TEMP_FILE):
        with open(TEMP_FILE, "r") as file:
            previous_timestamp = file.read().strip()
        logging.info(f"Previous timestamp found: {previous_timestamp}")
        return previous_timestamp
    logging.info("No previous timestamp found.")
    return None


def get_vault_entry(vault_token, latest_timestamp):
    logging.info(f"Retrieving Vault entry for timestamp: {latest_timestamp}")
    headers = {"X-Vault-Token": vault_token, "Content-Type": "application/json"}
    get_entry_url = f"{VAULT_ENDPOINTS['get_entry']}/{latest_timestamp}"
    response = make_request("GET", get_entry_url, headers=headers)
    credentials = response.get("data", {})
    username = credentials.get("username")
    password = credentials.get("password")
    if not username or not password:
        raise ValueError("Username or password not found in the Vault entry.")
    return {"username": username, "password": password}


def update_vault_entry(vault_token, credentials):
    logging.info("Updating destination Vault entry...")
    headers = {"X-Vault-Token": vault_token, "Content-Type": "application/json"}
    make_request("POST", VAULT_ENDPOINTS["update"], headers=headers, json=credentials)
    logging.info("Successfully updated destination Vault entry.")


def main():
    try:
        vault_token = login_to_vault()
        latest_timestamp = list_vault_entries(vault_token)

        # Compare with the previous timestamp
        previous_timestamp = get_previous_timestamp()
        if latest_timestamp == previous_timestamp:
            logging.info("Latest timestamp is the same as the previous run. Skipping update.")
            return
        else:
            logging.info("New timestamp detected. Proceeding with update.")

        # Retrieve credentials and update Vault
        credentials = get_vault_entry(vault_token, latest_timestamp)
        update_vault_entry(vault_token, credentials)

        # Save the latest timestamp
        save_latest_timestamp(latest_timestamp)

    except Exception as e:
        logging.error(f"Error: {e}")


if __name__ == "__main__":
    main()